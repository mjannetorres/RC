unit fEmpAccounts;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, cxGraphics, cxControls, cxLookAndFeels,
  cxLookAndFeelPainters, cxStyles, dxSkinsCore, dxSkinBlack, dxSkinBlue,
  dxSkinBlueprint, dxSkinCaramel, dxSkinCoffee, dxSkinDarkRoom, dxSkinDarkSide,
  dxSkinDevExpressDarkStyle, dxSkinDevExpressStyle, dxSkinFoggy,
  dxSkinGlassOceans, dxSkinHighContrast, dxSkiniMaginary, dxSkinLilian,
  dxSkinLiquidSky, dxSkinLondonLiquidSky, dxSkinMcSkin, dxSkinMetropolis,
  dxSkinMetropolisDark, dxSkinMoneyTwins, dxSkinOffice2007Black,
  dxSkinOffice2007Blue, dxSkinOffice2007Green, dxSkinOffice2007Pink,
  dxSkinOffice2007Silver, dxSkinOffice2010Black, dxSkinOffice2010Blue,
  dxSkinOffice2010Silver, dxSkinOffice2013DarkGray, dxSkinOffice2013LightGray,
  dxSkinOffice2013White, dxSkinOffice2016Colorful, dxSkinOffice2016Dark,
  dxSkinPumpkin, dxSkinSeven, dxSkinSevenClassic, dxSkinSharp, dxSkinSharpPlus,
  dxSkinSilver, dxSkinSpringTime, dxSkinStardust, dxSkinSummer2008,
  dxSkinTheAsphaltWorld, dxSkinsDefaultPainters, dxSkinValentine,
  dxSkinVisualStudio2013Blue, dxSkinVisualStudio2013Dark,
  dxSkinVisualStudio2013Light, dxSkinVS2010, dxSkinWhiteprint,
  dxSkinXmas2008Blue, dxSkinscxPCPainter, cxCustomData, cxFilter, cxData,
  cxDataStorage, cxEdit, cxNavigator, Data.DB, cxDBData, cxGridCustomTableView,
  cxGridTableView, cxGridDBTableView, Vcl.ComCtrls, cxClasses, System.ImageList,
  Vcl.ImgList, acAlphaImageList, System.Actions, Vcl.ActnList, cxGridLevel,
  cxGridCustomView, cxGrid, Vcl.ToolWin, scControls, Vcl.StdCtrls, Vcl.ExtCtrls,
  cxImageComboBox;

type
  Tf_EmpAccounts = class(TForm)
    Splitter1: TSplitter;
    Panel3: TPanel;
    Label1: TLabel;
    scToolBar2: TscToolBar;
    ToolButton1: TToolButton;
    ToolButton2: TToolButton;
    ToolButton3: TToolButton;
    cxGrid1: TcxGrid;
    cxGrid1DBTableView1: TcxGridDBTableView;
    cxGrid1Level1: TcxGridLevel;
    ActionList1: TActionList;
    New: TAction;
    Edit: TAction;
    Delete: TAction;
    sCharImageList1: TsCharImageList;
    ds_Emp: TDataSource;
    cxStyleRepository1: TcxStyleRepository;
    header_style: TcxStyle;
    select_style: TcxStyle;
    date_1: TDateTimePicker;
    date_2: TDateTimePicker;
    Label2: TLabel;
    cxGrid1DBTableView1BALANCE: TcxGridDBColumn;
    cxGrid1DBTableView1EFFECTIVITYDATE: TcxGridDBColumn;
    cxGrid1DBTableView1FORWARDED: TcxGridDBColumn;
    cxGrid1DBTableView1REMARKS: TcxGridDBColumn;
    procedure EditExecute(Sender: TObject);
    procedure DeleteExecute(Sender: TObject);
    procedure NewExecute(Sender: TObject);
    procedure FormShow(Sender: TObject);
  private
    { Private declarations }
    procedure LoadBalance;
  public
    { Public declarations }
  end;

var
  f_EmpAccounts: Tf_EmpAccounts;

implementation

{$R *.dfm}

uses dmPM, DateUtils, fEmpAccountsTemp;

procedure Tf_EmpAccounts.DeleteExecute(Sender: TObject);
begin
  with dm_PM do
  begin
    if brw_EmpAccnts.RecordCount > 0 then
    begin
      if brw_EmpAccntsFORWARDED.Value then
      begin
        MessageDlg('This account has been forwarded already. Record cannnot be deleted!', mtInformation, [mbOK], 0);
        Exit;
      end;

      if MessageDlg('Do you want to delete this record?', mtConfirmation, [mbYes, mbNo], 0) = mrYes then
      begin
        qry_EmpAccnts.Close;
        qry_EmpAccnts.SQL[2] := 'WHERE ID = :ID';
        qry_EmpAccnts.ParamByName('ID').Value  := brw_EmpAccntsID.Value;
        qry_EmpAccnts.Open();

        if qry_EmpAccnts.RecordCount > 0 then
        begin
          qry_EmpAccnts.Edit;
          qry_EmpAccntsCANCELLED.Value          := True;
          qry_EmpAccntsCANCELLEDBYD.Value       := userid;
          qry_EmpAccntsCANCELLEDDATETIME.Value  := Now;
          qry_EmpAccnts.Post;
          qry_EmpAccnts.ApplyUpdates();

          MessageDlg('Record has been deleted.', mtInformation, [mbOK], 0);

          LoadBalance;
        end;
      end;
    end
    else
    MessageDlg('Empty Record. Nothing to delete.', mtError, [mbOK], 0);
  end;
end;

procedure Tf_EmpAccounts.EditExecute(Sender: TObject);
begin
  with dm_PM do
  begin

    qry_EmpAccnts.Close;
    qry_EmpAccnts.SQL[2] := 'WHERE ID = :ID';
    qry_EmpAccnts.ParamByName('ID').Value   := brw_EmpAccntsID.Value;
    qry_EmpAccnts.Open();

    qry_EmpAccnts.Edit;

    f_EmpAccountsTemp  := Tf_EmpAccountsTemp.Create(Self);
    f_EmpAccountsTemp.Caption  := 'Edit Account';
    if f_EmpAccountsTemp.ShowModal = mrOk then
    begin
      qry_EmpAccnts.Post;
      qry_EmpAccnts.ApplyUpdates();
    end;

    LoadBalance;
  end;
end;

procedure Tf_EmpAccounts.FormShow(Sender: TObject);
begin
  date_1.Date   := StartOfTheYear(Now);
  date_2.Date   := EndOfTheMonth(Now);

  LoadBalance;
end;

procedure Tf_EmpAccounts.LoadBalance;
var date1, date2: TDateTime;
begin
  with dm_PM do
  begin
    date1 := StartOfTheDay(date_1.Date);
    date2 := EndOfTheDay(date_2.Date);

    brw_EmpAccnts.Close;
    brw_EmpAccnts.SQL[3] := 'WHERE BAL.EMPID = :EMPID AND (BAL.CREATEDDATETIME BETWEEN :DATE1 AND :DATE2) AND BAL.CANCELLED = FALSE';
    brw_EmpAccnts.ParamByName('EMPID').Value    := brw_EmpRegID.Value;
    brw_EmpAccnts.ParamByName('DATE1').Value    := FormatDateTime('yyyy-mm-dd hh:nn', date1);
    brw_EmpAccnts.ParamByName('DATE2').Value    := FormatDateTime('yyyy-mm-dd hh:nn', date2);
    brw_EmpAccnts.Open();
  end;
end;

procedure Tf_EmpAccounts.NewExecute(Sender: TObject);
begin
  with dm_PM do
  begin

    qry_EmpAccnts.Close;
    qry_EmpAccnts.SQL[2] := 'WHERE ID = 0';
    qry_EmpAccnts.Open();

    qry_EmpAccnts.Append;
    qry_EmpAccntsCANCELLED.Value           := False;
    qry_EmpAccntsCREATEDBYID.Value         := userid;
    qry_EmpAccntsCREATEDDATETIME.Value     := Now;
    qry_EmpAccntsBALANCE.Value             := 0;
    qry_EmpAccntsEFFECTIVITYDATE.Value     := EndOfTheWeek(Now);
    qry_EmpAccntsFORWARDED.Value           := False;

    f_EmpAccountsTemp  := Tf_EmpAccountsTemp.Create(Self);
    f_EmpAccountsTemp.Caption  := 'New Account';
    if f_EmpAccountsTemp.ShowModal = mrOk then
    begin
      qry_EmpAccnts.Post;
      qry_EmpAccnts.ApplyUpdates();
    end;

    LoadBalance;
  end;
end;

end.
