unit fPMBoard;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls, Vcl.StdCtrls, sPanel,
  Vcl.ComCtrls, sPageControl, cxGraphics, cxControls, cxLookAndFeels,
  cxLookAndFeelPainters, cxStyles, dxSkinsCore, dxSkinBlack, dxSkinBlue,
  dxSkinBlueprint, dxSkinCaramel, dxSkinCoffee, dxSkinDarkRoom, dxSkinDarkSide,
  dxSkinDevExpressDarkStyle, dxSkinDevExpressStyle, dxSkinFoggy,
  dxSkinGlassOceans, dxSkinHighContrast, dxSkiniMaginary, dxSkinLilian,
  dxSkinLiquidSky, dxSkinLondonLiquidSky, dxSkinMcSkin, dxSkinMetropolis,
  dxSkinMetropolisDark, dxSkinMoneyTwins, dxSkinOffice2007Black,
  dxSkinOffice2007Blue, dxSkinOffice2007Green, dxSkinOffice2007Pink,
  dxSkinOffice2007Silver, dxSkinOffice2010Black, dxSkinOffice2010Blue,
  dxSkinOffice2010Silver, dxSkinOffice2013DarkGray, dxSkinOffice2013LightGray,
  dxSkinOffice2013White, dxSkinOffice2016Colorful, dxSkinOffice2016Dark,
  dxSkinPumpkin, dxSkinSeven, dxSkinSevenClassic, dxSkinSharp, dxSkinSharpPlus,
  dxSkinSilver, dxSkinSpringTime, dxSkinStardust, dxSkinSummer2008,
  dxSkinTheAsphaltWorld, dxSkinsDefaultPainters, dxSkinValentine,
  dxSkinVisualStudio2013Blue, dxSkinVisualStudio2013Dark,
  dxSkinVisualStudio2013Light, dxSkinVS2010, dxSkinWhiteprint,
  dxSkinXmas2008Blue, dxSkinscxPCPainter, cxCustomData, cxFilter, cxData,
  cxDataStorage, cxEdit, cxNavigator, Data.DB, cxDBData, Vcl.WinXCtrls,
  Vcl.Mask, sMaskEdit, sCustomComboEdit, sToolEdit, sComboBox, cxGridLevel,
  cxClasses, cxGridCustomView, cxGridCustomTableView, cxGridTableView,
  cxGridDBTableView, cxGrid, sSkinManager, cxContainer, cxTextEdit, cxMaskEdit,
  cxButtonEdit, System.ImageList, Vcl.ImgList, System.Actions, Vcl.ActnList,
  scControls, scGPFontControls, acAlphaImageList, cxGridCardView,
  cxGridDBCardView, cxGridCustomLayoutView, dxLayoutContainer,
  cxGridViewLayoutContainer, cxGridLayoutView, cxGridDBLayoutView, sButton,
  Vcl.ToolWin, Vcl.Menus, sToolBar, cxGridBandedTableView, System.UITypes, Firedac.Stan.Param,
  cxGridDBBandedTableView;

type
  Tf_PMBoard = class(TForm)
    pan_JO: TPanel;
    Panel3: TPanel;
    Label1: TLabel;
    cmb_filter: TComboBox;
    Label2: TLabel;
    date_1: TDateTimePicker;
    date_2: TDateTimePicker;
    ds_JO: TDataSource;
    Label3: TLabel;
    cxStyleRepository1: TcxStyleRepository;
    Header_style: TcxStyle;
    ActionList1: TActionList;
    New: TAction;
    Edit: TAction;
    Delete: TAction;
    txt_search: TButtonedEdit;
    cxImageList1: TcxImageList;
    sCharImageList1: TsCharImageList;
    ds_sprint: TDataSource;
    select_style: TcxStyle;
    scToolBar2: TscToolBar;
    btnNew: TToolButton;
    btnEdit: TToolButton;
    btnDelete: TToolButton;
    ds_logs: TDataSource;
    btnPrint: TToolButton;
    Print: TAction;
    Overrideby: TAction;
    btnOverride: TToolButton;
    PopupMenu1: TPopupMenu;
    ReassignWorker1: TMenuItem;
    EditOPSheet1: TMenuItem;
    CancelOPSheet1: TMenuItem;
    ds_pending: TDataSource;
    PopupMenu2: TPopupMenu;
    CreateLayout1: TMenuItem;
    Timer1: TTimer;
    cxGrid1: TcxGrid;
    cxGrid1DBTableView1: TcxGridDBTableView;
    cxGrid1DBTableView1JONO: TcxGridDBColumn;
    cxGrid1DBTableView1CLIENT: TcxGridDBColumn;
    cxGrid1DBTableView1DESCRIPTION: TcxGridDBColumn;
    cxGrid1DBTableView1LOGDATE: TcxGridDBColumn;
    cxGrid1DBTableView1DUEDATE: TcxGridDBColumn;
    cxGrid1DBTableView1POSTED: TcxGridDBColumn;
    cxGrid1DBTableView1CLOSED: TcxGridDBColumn;
    cxGrid1DBTableView1PAIDAMNT: TcxGridDBColumn;
    cxGrid1DBTableView1BALAMNT: TcxGridDBColumn;
    cxGrid1Level1: TcxGridLevel;
    cxGrid1DBTableView1NETAMNT: TcxGridDBColumn;
    cxGrid1DBTableView1REMARKS: TcxGridDBColumn;
    cxStyleRepository2: TcxStyleRepository;
    cxStyle1: TcxStyle;
    cxGrid1DBTableView1STATUS: TcxGridDBColumn;
    SetStatus: TAction;
    ToolButton1: TToolButton;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure EditExecute(Sender: TObject);
    procedure DeleteExecute(Sender: TObject);
    procedure NewExecute(Sender: TObject);
    procedure txt_searchRightButtonClick(Sender: TObject);
    procedure txt_searchKeyPress(Sender: TObject; var Key: Char);
    procedure EditProjectExecute(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure PrintExecute(Sender: TObject);
    procedure cxGrid1DBTableView1CellClick(Sender: TcxCustomGridTableView;
      ACellViewInfo: TcxGridTableDataCellViewInfo; AButton: TMouseButton;
      AShift: TShiftState; var AHandled: Boolean);
    procedure AssignExecute(Sender: TObject);
    procedure OverridebyExecute(Sender: TObject);
    procedure EditOPSheetExecute(Sender: TObject);
    procedure CancelLayoutExecute(Sender: TObject);
    procedure Timer1Timer(Sender: TObject);
    procedure cxGrid1DBTableView1JONOStylesGetContentStyle(
      Sender: TcxCustomGridTableView; ARecord: TcxCustomGridRecord;
      AItem: TcxCustomGridTableItem; var AStyle: TcxStyle);
    procedure SetStatusExecute(Sender: TObject);
  private
    { Private declarations }
    ARedStyle, AVioletSyle, ABlueStyle, AGreenStyle, AYellowStyle, AOrangeStyle, AVermillionStyle, APinkStyle: TcxStyle;
    procedure user_rights;
    procedure notif;
  public
    { Public declarations }
    procedure search;
  end;

var
  f_PMBoard: Tf_PMBoard;

implementation

{$R *.dfm}

uses dmPM, fJO, DateUtils, fOPSheet, fLogTemp, fmenu, fMatRequest, fPassword,
  fPBReassign, fEnterJO, fEditOPSheet;

procedure Tf_PMBoard.txt_searchKeyPress(Sender: TObject; var Key: Char);
begin
  if Key = #13 then
  begin
    search;
  end;
end;

procedure Tf_PMBoard.txt_searchRightButtonClick(Sender: TObject);
begin
   search;
end;

procedure Tf_PMBoard.user_rights;
begin
  with dm_PM do
  begin
    brw_Rights.Close;
    brw_Rights.SQL[4] := 'WHERE EMP_ROLE.CANCELLED = FALSE';
    brw_Rights.Open();
    brw_Rights.First;

    btnNew.Visible      := brw_Rights.Locate('POLICYID;SELECT;ROLEID',VarArrayOf([1, True, roleid]), []);
    btnEdit.Visible     := brw_Rights.Locate('POLICYID;SELECT;ROLEID',VarArrayOf([2, True, roleid]), []);
    btnDelete.Visible   := brw_Rights.Locate('POLICYID;SELECT;ROLEID',VarArrayOf([3, True, roleid]), []);
    btnOverride.Visible  := brw_Rights.Locate('POLICYID;SELECT;ROLEID',VarArrayOf([5, True, roleid]), []);

    New.Enabled         := btnNew.Visible;
    Edit.Enabled        := btnEdit.Visible;
    Delete.Enabled      := btnDelete.Visible;
    Overrideby.Enabled  := btnOverride.Visible;
  end;
end;

procedure Tf_PMBoard.OverridebyExecute(Sender: TObject);
begin
  with dm_PM do
  begin
    if brw_JOPOSTED.Value and (brw_JOBALAMNT.Value > 0) then
    begin
      brw_CashReg.Close;
      brw_CashReg.SQL[2]  := 'WHERE REFID = :ID AND SOURCE = ''JO'' AND CANCELLED = FALSE';
      brw_CashReg.ParamByName('ID').Value := brw_JOID.Value;
      brw_CashReg.Open();

      f_Password  := Tf_Password.Create(Self);
      f_Password.Caption  := 'Enter your Password';
      if f_Password.ShowModal = mrOk then
      begin
        brw_Users.Close;
        brw_Users.SQL[2] := 'WHERE ID = :ID AND PASSWORD = :PASSWORD AND CANCELLED = FALSE';
        brw_Users.ParamByName('ID').Value         := userid;
        brw_Users.ParamByName('PASSWORD').Value   := f_Password.txt_Password.Text;
        brw_Users.Open();

        if brw_Users.RecordCount = 0 then
        begin
          MessageDlg('Password does not match! Please try again.', mtInformation, [mbOK], 0);
          Exit;
        end;

        qry_JO.Close;
        qry_JO.SQL[2] := 'WHERE ID = :ID';
        qry_JO.ParamByName('ID').Value  := brw_JOID.Value;
        qry_JO.Open();

        if brw_JO.RecordCount > 0 then
        begin
          qry_JO.Edit;
          qry_JOOVERRIDE.Value      := True;
          qry_JOOVERRIDEBY.Value    := userid;
          qry_JO.Post;
          qry_JO.ApplyUpdates();

          EditExecute(nil);
        end;
      end;
    end
    else
      MessageDlg('Order is already paid in full! Cannot override this record', mtInformation, [mbOK], 0);
  end;
end;

procedure Tf_PMBoard.AssignExecute(Sender: TObject);
begin
  with dm_PM do
  begin

  end;
end;

procedure Tf_PMBoard.CancelLayoutExecute(Sender: TObject);
begin
  with dm_PM do
  begin
    if brw_pmboard.RecordCount > 0 then
    begin
      if MessageDlg('Do you want to cancel layout for JO No. ?'+brw_pmboardJONO.AsString, mtConfirmation, [mbYes, mbNo], 0) = mrYes then
      begin
        upd_PMBoard.Close;
        upd_PMBoard.SQL[1]  := 'SET CANCELLED = TRUE';
        upd_PMBoard.SQL[2]  := 'WHERE JONO = '+brw_pmboardJONO.AsString;
        upd_PMBoard.ExecSQL;

        qry_JO.Close;
        qry_JO.SQL[2] := 'WHERE JONO = :JONO AND CANCELLED = FALSE';
        qry_JO.ParamByName('JONO').Value  := brw_pmboardJONO.Value;
        qry_JO.Open();

        qry_JO.Edit;
        qry_JOLAYOUT.Value  := False;
        qry_JO.Post;
        qry_JO.ApplyUpdates();

        upd_JODetail.Close;
        upd_JODetail.SQL[1] := 'SET LAYOUT = '''', ';
        upd_JODetail.SQL[2] := 'FILENAME = ''''';
        upd_JODetail.SQL[3] := 'WHERE HEADERID = '+qry_JOID.AsString;
        upd_JODetail.ExecSQL;

        MessageDlg('Layout has been cancelled', mtInformation, [mbOK], 0);

        search;
      end;
    end;
  end;
end;

procedure Tf_PMBoard.cxGrid1DBTableView1CellClick(
  Sender: TcxCustomGridTableView; ACellViewInfo: TcxGridTableDataCellViewInfo;
  AButton: TMouseButton; AShift: TShiftState; var AHandled: Boolean);
begin
  btnOverride.Visible   := (dm_PM.brw_JOPOSTED.Value or dm_PM.brw_JOLAYOUT.Value) and dm_PM.brw_Rights.Locate('POLICYID;SELECT;ROLEID',VarArrayOf([5, True, dm_PM.roleid]), [])
end;

procedure Tf_PMBoard.cxGrid1DBTableView1JONOStylesGetContentStyle(
  Sender: TcxCustomGridTableView; ARecord: TcxCustomGridRecord;
  AItem: TcxCustomGridTableItem; var AStyle: TcxStyle);
  var layout : string;
begin
  layout := '';
  if ARecord.Values[cxGrid1DBTableView1STATUS.Index] <> Null then
  layout  := ARecord.Values[cxGrid1DBTableView1STATUS.Index];

  if layout = 'L' then
  AStyle  :=  AVioletSyle
  else if layout = 'P' then
  AStyle  := ABlueStyle
  else if layout = 'B' then
  AStyle  := AGreenStyle
  else if layout = 'H' then
  AStyle  := AYellowStyle
  else if layout = 'C' then
  AStyle  := AOrangeStyle
  else if layout = 'S' then
  AStyle  := AVermillionStyle
  else if layout = 'Z' then
  AStyle  := APinkStyle
end;

procedure Tf_PMBoard.DeleteExecute(Sender: TObject);
begin
  with dm_PM do
  begin
    if brw_JO.RecordCount > 0 then
    begin
      if not brw_JOPOSTED.Value then
      begin
        if not brw_JOLAYOUT.Value then
        begin
          if brw_JOPAIDAMNT.Value <= 0 then
          begin
            if MessageDlg('Do you want to delete this record?', mtConfirmation, [mbYes, mbNo], 0) = mrYes then
            begin
              qry_JO.Close;
              qry_JO.SQL[2] := 'WHERE ID = '+brw_JOID.AsString;
              qry_JO.Open();

              if qry_JO.RecordCount > 0 then
              begin
                qry_JO.Edit;
                qry_JOCANCELLED.Value         := True;
                qry_JODELETEDDATETIME.Value   := Now;
                qry_JODELETEDBYID.Value       := userid;
                qry_JO.Post;
                qry_JO.ApplyUpdates();
              end;

              del_JoDetails.Close;
              del_JoDetails.SQL[1] := 'SET CANCELLED = TRUE,';
              del_JoDetails.SQL[2] := 'DELETEDBYID = '+IntToStr(userid)+',';
              del_JoDetails.SQL[3] := 'DELETEDDATETIME = '+''''+FormatDateTime('yyyy-mm-dd hh:nn:ss', Now)+'''';
              del_JoDetails.SQL[4] := 'WHERE HEADERID = '+brw_JOID.AsString;
              del_JoDetails.ExecSQL;


              del_JOCost.Close;
              del_JOCost.SQL[1] := 'SET CANCELLED = TRUE,';
              del_JOCost.SQL[2] := 'CANCELLEDBYID = '+IntToStr(dm_PM.userid)+',';
              del_JOCost.SQL[3] := 'CANCELLEDDATETIME = '''+FormatDateTime('yyyy-mm-dd hh:nn:ss', Now)+'''';
              del_JOCost.SQL[4] := 'WHERE HEADERID = '+qry_JOID.AsString;
              del_JOCost.ExecSQL;

              MessageDlg('JO NO. '+brw_JOJONO.AsString + ' has been deleted', mtInformation, [mbOK], 0);
              search;
            end;
          end
          else
           MessageDlg('Paid transaction(s) cannot be deleted. Please void payment history', mtError, [mbOK], 0);
        end
        else
          MessageDlg('Job Order has been forwarded for layout. Cannot delete Job Order.', mtError, [mbOK], 0);
      end
      else
         MessageDlg('Cannot delete posted transaction(s)', mtError, [mbOK], 0);
    end;
  end;
end;

procedure Tf_PMBoard.EditExecute(Sender: TObject);
var particulars: string;
begin
  with dm_PM do
  begin
    if brw_JO.RecordCount > 0 then
    begin

      qry_JO.Close;
      qry_JO.SQL[2] := 'WHERE ID = '+brw_JOID.AsString;
      qry_JO.Open();

      qry_JO.Edit;

      qry_JODetail.Close;
      qry_JODetail.SQL[2] := 'WHERE HEADERID = :ID AND CANCELLED = FALSE';
      qry_JODetail.ParamByName('ID').Value  := brw_JOID.Value;
      qry_JODetail.Open();

      tb_JODetail.Close;
      tb_JODetail.Open;

      if qry_JODetail.RecordCount > 0 then
      begin
        qry_JODetail.First;
        while not qry_JODetail.Eof do
        begin
          tb_JODetail.Append;
          tb_JODetailID.Value           := qry_JODetailID.Value;
          tb_JODetailSHIRTID.Value      := qry_JODetailSHIRTID.Value;
          tb_JODetailDESCRIPTION.Value  := qry_JODetailDESCRIPTION.Value;
          tb_JODetailFABRICID.Value     := qry_JODetailFABRICID.Value;
          tb_JODetailFABRIC.Value       := qry_JODetailFABRIC.Value;
          tb_JODetailQTY.Value          := qry_JODetailQTY.Value;
          tb_JODetailFREE.Value         := qry_JODetailFREE.Value;
          tb_JODetailCOST.Value         := qry_JODetailCOST.Value;
          tb_JODetailUNIT.Value         := qry_JODetailUNIT.Value;
          tb_JODetailREMARKS.Value      := qry_JODetailREMARKS.Value;
          tb_JODetail.Post;

          qry_JODetail.Next;
        end;
      end;

      tb_JODetail.First;

      tb_InvReqDetail.Close;
      tb_InvReqDetail.Open;

      qry_JoCost.Close;
      qry_JoCost.SQL[2]  := 'WHERE HEADERID = :ID AND CANCELLED = FALSE';
      qry_JoCost.ParamByName('ID').Value := qry_JOID.Value;
      qry_JoCost.Open();


      if qry_JoCost.RecordCount > 0 then
      begin
        qry_JoCost.First;
         while not qry_JoCost.Eof do
         begin
          tb_InvReqDetail.Append;
          tb_InvReqDetailID.Value        := qry_JoCostID.Value;
          tb_InvReqDetailGARMENTID.Value := qry_JoCostGARMENTID.Value;
          tb_InvReqDetailITEMID.Value    := qry_JoCostITEMID.Value;
          tb_InvReqDetailITEMDESC.Value  := qry_JoCostITEMDESC.Value;
          tb_InvReqDetailUNIT.Value      := qry_JoCostUNIT.Value;
          tb_InvReqDetailQTY.Value       := qry_JoCostQTY.Value;
          tb_InvReqDetailCOST.Value      := qry_JoCostCOST.Value;
          tb_InvReqDetail.Post;

          qry_JoCost.Next;
         end;
         tb_InvReqDetail.First;
      end;

      f_JO  := Tf_JO.Create(Self);
      if f_JO.ShowModal = mrOk then
      begin
        qry_JOBALAMNT.Value := qry_JONETAMNT.Value - qry_JOPAIDAMNT.Value;
        qry_JO.Post;
        qry_JO.ApplyUpdates();

        particulars  := '';

        tb_JODetail.First;
        while not tb_JODetail.Eof do
        begin
          qry_JODetail.Close;
          if tb_JODetailID.IsNull then
          qry_JODetail.SQL[2] := 'WHERE ID = 0'
          else
          qry_JODetail.SQL[2] := 'WHERE ID = '+tb_JODetailID.AsString;
          qry_JODetail.Open();

          if tb_JODetailID.IsNull then
          qry_JODetail.Append
          else
          qry_JODetail.Edit;

          qry_JODetailHEADERID.Value      := qry_JOID.Value;
          qry_JODetailSHIRTID.Value       := tb_JODetailSHIRTID.Value;
          qry_JODetailDESCRIPTION.Value   := tb_JODetailDESCRIPTION.Value;
          qry_JODetailFABRICID.Value      := tb_JODetailFABRICID.Value;
          qry_JODetailFABRIC.Value        := tb_JODetailFABRIC.Value;
          qry_JODetailQTY.Value           := tb_JODetailQTY.Value;
          qry_JODetailFREE.Value          := tb_JODetailFREE.Value;
          qry_JODetailCOST.Value          := tb_JODetailCOST.Value;
          qry_JODetailUNIT.Value          := tb_JODetailUNIT.Value;
          qry_JODetailTOTALCOST.Value     := tb_JODetailTOTALCOST.Value;
          qry_JODetailREMARKS.Value       := tb_JODetailREMARKS.Value;

          qry_JODetailCANCELLED.Value     := False;

          if tb_JODetail.RecNo <> tb_JODetail.RecordCount then
          particulars := particulars + IntToStr(qry_JODetailQTY.Value + qry_JODetailFREE.Value) +' - '+ qry_JODetailDESCRIPTION.AsString + ' ('+qry_JODetailFABRIC.AsString+ ') ' + qry_JODetailSIZE.AsString  + ' '+qry_JODetailFIT.AsString + #13#10
          else
          particulars := particulars + IntToStr(qry_JODetailQTY.Value + qry_JODetailFREE.Value) +' - '+ qry_JODetailDESCRIPTION.AsString + ' ('+qry_JODetailFABRIC.AsString+ ') ' + qry_JODetailSIZE.AsString  + ' '+qry_JODetailFIT.AsString;

          qry_JODetail.Post;
          qry_JODetail.ApplyUpdates();

          tb_JODetail.Next;
        end;

        tb_InvReqDetail.First;
        while not tb_InvReqDetail.Eof do
        begin
          qry_JoCost.Close;
          if tb_InvReqDetailID.IsNull then
          qry_JoCost.SQL[2] := 'WHERE ID = 0'
          else
          begin
            qry_JoCost.SQL[2] := 'WHERE ID = :ID';
            qry_JoCost.ParamByName('ID').Value   := tb_InvReqDetailID.Value;
          end;
          qry_JoCost.Open();

          if qry_JoCostID.IsNull then
          qry_JoCost.Append
          else
          qry_JoCost.Edit;

          qry_JoCostHEADERID.Value         := qry_JOID.Value;
          qry_JoCostGARMENTID.Value        := tb_InvReqDetailGARMENTID.Value;
          qry_JoCostITEMID.Value           := tb_InvReqDetailITEMID.Value;
          qry_JoCostITEMDESC.Value         := tb_InvReqDetailITEMDESC.Value;
          qry_JoCostCOST.Value             := tb_InvReqDetailCOST.Value;
          qry_JoCostTOTALCOST.Value        := tb_InvReqDetailTOTALCOST.Value;
          qry_JoCostUNIT.Value             := tb_InvReqDetailUNIT.Value;
          qry_JoCostCANCELLED.Value        := False;
          qry_JoCostQTY.Value              := tb_InvReqDetailQTY.Value;

          qry_JoCost.Post;
          qry_JoCost.ApplyUpdates();
          tb_InvReqDetail.Next;
        end;

        upd_jo.Close;
        upd_jo.SQL[1] := 'SET SUMMARY = '''+particulars+'''';
        upd_jo.SQL[2] := 'WHERE ID = '+IntToStr(qry_JOID.Value);
        upd_jo.ExecSQL;

        search;
      end;
    end;
  end;
end;

procedure Tf_PMBoard.EditOPSheetExecute(Sender: TObject);
begin
  with dm_PM do
  begin
    if brw_pmboard.RecordCount > 0 then
    begin
      brw_OPShirt.Close;
      brw_OPShirt.SQL[4] := 'WHERE JO_DETAIL.HEADERID = :ID AND JO_DETAIL.CANCELLED = FALSE';
      brw_OPShirt.ParamByName('ID').Value  := brw_pmboardJONO.Value;
      brw_OPShirt.Open();

      qry_PB.Close;
      qry_PB.SQL[2] := 'WHERE JONO = :JO AND SPRINT = :SPRINT AND CANCELLED = FALSE';
      qry_PB.ParamByName('JO').Value      := brw_pmboardJONO.Value;
      qry_PB.ParamByName('SPRINT').Value  := brw_pmboardSPRINT.Value;
      qry_PB.Open();

      qry_JO.Close;
      qry_JO.SQL[2] := 'WHERE JONO = :JONO AND CANCELLED = FALSE';
      qry_JO.ParamByName('JONO').Value  := brw_pmboardJONO.Value;
      qry_JO.Open();


      tb_OPDetail.Close;
      tb_OPDetail.Open;

      if qry_PB.RecordCount > 0 then
      begin
        qry_PB.First;
        while not qry_PB.Eof do
        begin
          tb_OPDetail.Append;
          tb_OPDetailID.Value       := qry_PBID.Value;
          tb_OPDetailSIZE.Value     := qry_PBSIZE.Value;
          tb_OPDetailFIT.Value      := qry_PBFIT.Value;
          tb_OPDetailQTY.Value      := qry_PBQTY.Value;
          tb_OPDetailFREE.Value     := qry_PBFREE.Value;
          tb_OPDetailUNIT.Value     := qry_PBUNIT.Value;
          tb_OPDetailREMARKS.Value  := qry_PBREMARKS.Value;
          tb_OPDetailID.Value       := qry_PBID.Value;
          tb_OPDetailSHIRT.Value    := qry_PBDESCRIPTION.Value;
          tb_OPDetailFABRIC.Value   := qry_PBFABRIC.Value;
          tb_OPDetailDETAILID.Value := qry_PBDETAILID.Value;
          tb_OPDetailPAPERSIZE.Value:= qry_PBPAPERSIZE.Value;
          tb_OPDetailSHIRTID.Value  := qry_PBSHIRTID.Value;
          tb_OPDetailFABRICID.Value := qry_PBFABRICID.Value;
          tb_OPDetailEMPID.Value    := qry_PBEMPID.Value;
          tb_OPDetailROLEID.Value   := qry_PBROLEID.Value;

          tb_OPDetail.Post;
          qry_PB.Next;
        end;
      end;

      tb_OPDetail.First;


      f_EditOPSheet   := Tf_EditOPSheet.Create(Self);
      f_EditOPSheet.scGPPageControl2.Tabs[0].Caption  := brw_pmboardSPRINT.Value + ' Sheeta';
      if f_EditOPSheet.ShowModal = mrOk then
      begin

        tb_OPDetail.First;
        while not tb_OPDetail.Eof do
        begin
          qry_PB.Close;
          if tb_OPDetailID.IsNull then
          qry_PB.SQL[2] := 'WHERE ID = 0'
          else
          begin
            qry_PB.SQL[2] := 'WHERE ID = :ID';
            qry_PB.ParamByName('ID').Value  := tb_OPDetailID.Value;
          end;
          qry_PB.Open();

          if tb_OPDetailID.IsNull then
          qry_PB.Append
          else
          qry_PB.Edit;

          qry_PBJONO.Value        := qry_JOJONO.Value;
          qry_PBSTARTDATE.Value   := Now;
          qry_PBDATEDUE.Value     := qry_JODUEDATE.Value;
          qry_PBSPRINT.Value      := brw_pmboardSPRINT.Value;
          qry_PBCANCELLED.Value   := False;
          qry_PBCREATEDBYID.Value := userid;
          qry_PBDETAILID.Value    := tb_OPDetailDETAILID.Value;
          qry_PBDONE.Value        := False;
          qry_PBPAPERSIZE.Value   := tb_OPDetailPAPERSIZE.Value;
          qry_PBEMPID.Value       := tb_OPDetailEMPID.Value;
          qry_PBROLEID.Value      := brw_pmboardROLEID.Value;
          qry_PBSHIRTID.Value     := tb_OPDetailSHIRTID.Value;
          qry_PBDESCRIPTION.Value := tb_OPDetailSHIRT.Value;
          qry_PBFABRICID.Value    := tb_OPDetailFABRICID.Value;
          qry_PBFABRIC.Value      := tb_OPDetailFABRIC.Value;
          qry_PBSIZE.Value        := tb_OPDetailSIZE.Value;
          qry_PBFIT.Value         := tb_OPDetailFIT.Value;
          qry_PBQTY.Value         := tb_OPDetailQTY.Value;
          qry_PBFREE.Value        := tb_OPDetailFREE.Value;
          qry_PBUNIT.Value        := tb_OPDetailUNIT.Value;
          qry_PBREMARKS.Value     := tb_OPDetailREMARKS.Value;
          if qry_PB.State = dsInsert then
          qry_PBREMQTY.Value      := tb_OPDetailQTY.Value;

          qry_PB.Post;
          qry_PB.ApplyUpdates();

          tb_OPDetail.Next;
        end;
      end;

    end;
  end;
end;

procedure Tf_PMBoard.EditProjectExecute(Sender: TObject);
begin
  with dm_PM do
  begin
    if brw_pmboard.RecordCount > 0 then
    begin
      qry_JO.Close;
      qry_JO.SQL[2] := 'WHERE JONO = :JONO AND CANCELLED = FALSE';
      qry_JO.ParamByName('JONO').Value  := brw_pmboardJONO.Value;
      qry_JO.Open();

      brw_OPShirt.Close;
      brw_OPShirt.SQL[4] := 'WHERE JO_DETAIL.HEADERID = :ID AND JO_DETAIL.CANCELLED = FALSE';
      brw_OPShirt.ParamByName('ID').Value  := qry_JOID.Value;
      brw_OPShirt.Open();

      qry_PB.Close;
      qry_PB.SQL[2] := 'WHERE JONO = :JO AND CANCELLED = FALSE';
      qry_PB.ParamByName('JO').Value  := qry_JOJONO.Value;
      qry_PB.Open();

      tb_OPDetail.Close;
      tb_OPDetail.Open;

      if qry_PB.RecordCount > 0 then
      begin
        qry_PB.First;
        while not qry_PB.Eof do
        begin
          tb_OPDetail.Append;
          tb_OPDetailID.Value       := qry_PBID.Value;
          tb_OPDetailSIZE.Value     := qry_PBSIZE.Value;
          tb_OPDetailFIT.Value      := qry_PBFIT.Value;
          tb_OPDetailQTY.Value      := qry_PBQTY.Value;
          tb_OPDetailFREE.Value     := qry_PBFREE.Value;
          tb_OPDetailUNIT.Value     := qry_PBUNIT.Value;
          tb_OPDetailREMARKS.Value  := qry_PBREMARKS.Value;
          tb_OPDetailID.Value       := qry_PBID.Value;
          tb_OPDetailSHIRT.Value    := qry_PBDESCRIPTION.Value;
          tb_OPDetailFABRIC.Value   := qry_PBFABRIC.Value;
          tb_OPDetailDETAILID.Value := qry_PBDETAILID.Value;
          tb_OPDetailPAPERSIZE.Value:= qry_PBPAPERSIZE.Value;
          tb_OPDetailSHIRTID.Value  := qry_PBSHIRTID.Value;
          tb_OPDetailFABRICID.Value := qry_PBFABRICID.Value;

          tb_OPDetail.Post;
          qry_PB.Next;
        end;
      end;

      tb_OPDetail.First;

      qry_JODetail.Close;
      qry_JODetail.SQL[2] := 'WHERE HEADERID = :ID AND CANCELLED = FALSE';
      qry_JODetail.ParamByName('ID').Value  := qry_JOID.Value;
      qry_JODetail.Open();


      f_OPSheet   := Tf_OPSheet.Create(Self);
      if f_OPSheet.ShowModal = mrOk then
      begin
        qry_JODetail.Edit;
        qry_JODetail.Post;
        qry_JODetail.ApplyUpdates();

        tb_OPDetail.First;
        while not tb_OPDetail.Eof do
        begin
          qry_PB.Close;
          if tb_OPDetailID.IsNull then
          qry_PB.SQL[2] := 'WHERE ID = 0'
          else
          begin
            qry_PB.SQL[2] := 'WHERE ID = :ID';
            qry_PB.ParamByName('ID').Value  := tb_OPDetailID.Value;
          end;
          qry_PB.Open();

          if tb_OPDetailID.IsNull then
          qry_PB.Append
          else
          qry_PB.Edit;

          qry_PBJONO.Value        := qry_JOJONO.Value;
          qry_PBSTARTDATE.Value   := Now;
          qry_PBDATEDUE.Value     := qry_JODUEDATE.Value;
          qry_PBSPRINT.Value      := 'LAYOUT/DESIGN';
          qry_PBCANCELLED.Value   := False;
          qry_PBCREATEDBYID.Value := userid;
          qry_PBDETAILID.Value    := tb_OPDetailDETAILID.Value;
          qry_PBDONE.Value        := False;
          qry_PBPAPERSIZE.Value   := tb_OPDetailPAPERSIZE.Value;
          qry_PBEMPID.Value       := empid;
          qry_PBROLEID.Value      := roleid;
          qry_PBSHIRTID.Value     := tb_OPDetailSHIRTID.Value;
          qry_PBDESCRIPTION.Value := tb_OPDetailSHIRT.Value;
          qry_PBFABRICID.Value    := tb_OPDetailFABRICID.Value;
          qry_PBFABRIC.Value      := tb_OPDetailFABRIC.Value;
          qry_PBSIZE.Value        := tb_OPDetailSIZE.Value;
          qry_PBFIT.Value         := tb_OPDetailFIT.Value;
          qry_PBQTY.Value         := tb_OPDetailQTY.Value;
          qry_PBFREE.Value        := tb_OPDetailFREE.Value;
          qry_PBUNIT.Value        := tb_OPDetailUNIT.Value;
          qry_PBREMARKS.Value     := tb_OPDetailREMARKS.Value;

          qry_PB.Post;
          qry_PB.ApplyUpdates();

          tb_OPDetail.Next;
        end;
      end;

    end;
  end;
end;

procedure Tf_PMBoard.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  Timer1.Enabled  := False;
  Action  := caFree;
end;

procedure Tf_PMBoard.FormCreate(Sender: TObject);
begin
  ARedStyle            := TcxStyle.Create(Self);
  ARedStyle.Color      := $008080FF;

  AVioletSyle          := TcxStyle.Create(Self);
  AVioletSyle.Color    := $0080FF80;

  ABlueStyle           := TcxStyle.Create(Self);
  ABlueStyle.Color     := clAqua;

  AGreenStyle          := TcxStyle.Create(Self);
  AGreenStyle.Color    := $00FF8000;

  AYellowStyle         := TcxStyle.Create(Self);
  AYellowStyle.Color   := $0080FFFF;

  AOrangeStyle         := TcxStyle.Create(Self);
  AOrangeStyle.Color   := $00C080FF;

  AVermillionStyle     := TcxStyle.Create(Self);
  AVermillionStyle.Color  := $000080FF;

  APinkStyle           := TcxStyle.Create(Self);
  APinkStyle.Color     := $008000FF;


  date_1.Date := StartOfTheMonth(Date);
  date_2.Date := Now;
  cmb_filter.ItemIndex := 0;

  user_rights;

  search;

  notif;
  //generate_pm;
  //generate_logs;
end;


procedure Tf_PMBoard.NewExecute(Sender: TObject);
var particulars: string;
 maxid: Integer;
begin
  with dm_PM do
  begin
    maxid := 0;

    brw_MaxJO.Close;
    brw_MaxJO.SQL[2]  := 'WHERE CANCELLED = FALSE';
    brw_MaxJO.Open();

    qry_JO.Close;
    qry_JO.SQL[2] := 'WHERE ID = 0';
    qry_JO.Open();

    qry_JO.Append;
    qry_JOLOGDATE.Value           := StrToDate(FormatDateTime('mm/dd/yyyy', Now));
    qry_JOCREATEDBYID.Value       := userid;
    qry_JOCREATEDDATETIME.Value   := Now;
    qry_JOCANCELLED.Value         := False;
    qry_JOPOSTED.Value            := False;
    qry_JORELEASED.Value          := False;
    qry_JOCLOSED.Value            := False;
    qry_JOLAYOUT.Value            := False;
    qry_JOJONO.Value              := brw_MaxJOID.Value +1;
    qry_JOGROSSAMNT.Value         := 0;
    qry_JODISCOUNT.Value          := 0;
    qry_JONETAMNT.Value           := 0;

    tb_JODetail.Close;
    tb_JODetail.Open;

    tb_InvReqDetail.Close;
    tb_InvReqDetail.Open;


    f_JO  := Tf_JO.Create(Self);
    if f_JO.ShowModal = mrOk then
    begin
      qry_JOBALAMNT.Value := qry_JONETAMNT.Value - qry_JOPAIDAMNT.Value;
      qry_JO.Post;
      qry_JO.ApplyUpdates();

      particulars  := '';

      maxid := qry_JOID.Value;

      tb_JODetail.First;
      while not tb_JODetail.Eof do
      begin
        qry_JODetail.Close;
        qry_JODetail.SQL[2] := 'WHERE ID = 0';
        qry_JODetail.Open();

        qry_JODetail.Append;

        qry_JODetailHEADERID.Value      := maxid;
        qry_JODetailSHIRTID.Value       := tb_JODetailSHIRTID.Value;
        qry_JODetailDESCRIPTION.Value   := tb_JODetailDESCRIPTION.Value;
        qry_JODetailFABRICID.Value      := tb_JODetailFABRICID.Value;
        qry_JODetailFABRIC.Value        := tb_JODetailFABRIC.Value;
        qry_JODetailQTY.Value           := tb_JODetailQTY.Value;
        qry_JODetailFREE.Value          := tb_JODetailFREE.Value;
        qry_JODetailCOST.Value          := tb_JODetailCOST.Value;
        qry_JODetailUNIT.Value          := tb_JODetailUNIT.Value;
        qry_JODetailTOTALCOST.Value     := tb_JODetailTOTALCOST.Value;
        qry_JODetailCANCELLED.Value     := False;
        qry_JODetailREMARKS.Value       := tb_JODetailREMARKS.Value;

        if tb_JODetail.RecNo <> tb_JODetail.RecordCount then
        particulars := particulars + IntToStr(qry_JODetailQTY.Value + qry_JODetailFREE.Value) +' - '+ qry_JODetailDESCRIPTION.AsString + ' ('+qry_JODetailFABRIC.AsString+ ') ' + qry_JODetailSIZE.AsString  + ' '+qry_JODetailFIT.AsString + #13#10
        else
        particulars := particulars + IntToStr(qry_JODetailQTY.Value + qry_JODetailFREE.Value) +' - '+ qry_JODetailDESCRIPTION.AsString + ' ('+qry_JODetailFABRIC.AsString+ ') ' + qry_JODetailSIZE.AsString  + ' '+qry_JODetailFIT.AsString;

        qry_JODetail.Post;
        qry_JODetail.ApplyUpdates();

        tb_JODetail.Next;
      end;

      tb_InvReqDetail.First;

      while not tb_InvReqDetail.Eof do
      begin
        qry_JoCost.Close;
        qry_JoCost.SQL[2] := 'WHERE ID = 0';
        qry_JoCost.Open();

        qry_JoCost.Append;
        qry_JoCostHEADERID.Value         := qry_JOID.Value;
        qry_JoCostITEMID.Value           := tb_InvReqDetailITEMID.Value;
        qry_JoCostGARMENTID.Value        := tb_InvReqDetailGARMENTID.Value;
        qry_JoCostITEMDESC.Value         := tb_InvReqDetailITEMDESC.Value;
        qry_JoCostCOST.Value             := tb_InvReqDetailCOST.Value;
        qry_JoCostTOTALCOST.Value        := tb_InvReqDetailTOTALCOST.Value;
        qry_JoCostUNIT.Value             := tb_InvReqDetailUNIT.Value;
        qry_JoCostCANCELLED.Value        := False;
        qry_JoCostQTY.Value              := tb_InvReqDetailQTY.Value;

        qry_JoCost.Post;
        qry_JoCost.ApplyUpdates();
        tb_InvReqDetail.Next;
      end;

      upd_jo.Close;
      upd_jo.SQL[1] := 'SET SUMMARY = '''+particulars+'''';
      upd_jo.SQL[2] := 'WHERE ID = '+IntToStr(maxid);
      upd_jo.ExecSQL;

      search;
    end;
  end;
end;

procedure Tf_PMBoard.notif;
begin
  with dm_PM do
  begin
    qry_Notif.Close;
    qry_Notif.SQL[2]  := 'WHERE ID = 1';
    qry_Notif.Open();

    Timer1.Interval := qry_NotifINTERVAL.AsInteger * 10000;
    Timer1.Enabled  := qry_NotifENABLED.Value;
  end;
end;


procedure Tf_PMBoard.PrintExecute(Sender: TObject);
begin
  with dm_PM do
  begin
    if (brw_JO.RecordCount > 0) then
    begin
      qry_JO.Close;
      qry_JO.SQL[2] := 'WHERE ID = '+brw_JOID.AsString;
      qry_JO.Open();

      qry_JO.Edit;

      qry_JODetail.Close;
      qry_JODetail.SQL[2] := 'WHERE HEADERID = '+brw_JOID.AsString;
      qry_JODetail.Open();

      tb_JODetail.Close;
      tb_JODetail.Open;

      if qry_JODetail.RecordCount > 0 then
      begin
        qry_JODetail.First;
        while not qry_JODetail.Eof do
        begin
          tb_JODetail.Append;
          tb_JODetailID.Value           := qry_JODetailID.Value;
          tb_JODetailSHIRTID.Value      := qry_JODetailSHIRTID.Value;
          tb_JODetailDESCRIPTION.Value  := qry_JODetailDESCRIPTION.Value;
          tb_JODetailFABRICID.Value     := qry_JODetailFABRICID.Value;
          tb_JODetailFABRIC.Value       := qry_JODetailFABRIC.Value;
          tb_JODetailQTY.Value          := qry_JODetailQTY.Value;
          tb_JODetailFREE.Value         := qry_JODetailFREE.Value;
          tb_JODetailCOST.Value         := qry_JODetailCOST.Value;
          tb_JODetailUNIT.Value         := qry_JODetailUNIT.Value;
          tb_JODetailREMARKS.Value      := qry_JODetailREMARKS.Value;
          tb_JODetail.Post;

          qry_JODetail.Next;
        end;
      end;
      tb_JODetail.First;

      f_JO  := Tf_JO.Create(Self);
      f_JO.PrintExecute(Self);
    end;

  end;

end;

procedure Tf_PMBoard.search;
begin
  with dm_PM do
  begin
    brw_JO.Close;
    if cmb_filter.Text <> '' then
    begin
      if cmb_filter.ItemIndex = 0 then
      begin
        brw_JO.SQL[3] := 'WHERE (JO_HEADER.LOGDATE BETWEEN :DATE1 AND :DATE2) AND JO_CLIENTS.NAME LIKE :NAME AND JO_HEADER.CANCELLED = FALSE';
        brw_JO.ParamByName('NAME').Value  := '%'+Trim(txt_search.Text)+'%';
        brw_JO.ParamByName('DATE1').Value := FormatDateTime('yyyy-mm-dd hh:nn', StartOfTheDay(date_1.Date));
        brw_JO.ParamByName('DATE2').Value := FormatDateTime('yyyy-mm-dd hh:nn', EndOfTheDay(date_2.Date));
      end
      else
      begin
        brw_JO.SQL[3] := 'WHERE (JO_HEADER.LOGDATE BETWEEN :DATE1 AND :DATE2) AND JO_HEADER.JONO LIKE :JONO AND JO_HEADER.CANCELLED = FALSE';
        brw_JO.ParamByName('JONO').Value  := '%'+Trim(txt_search.Text)+'%';
        brw_JO.ParamByName('DATE1').Value := FormatDateTime('yyyy-mm-dd hh:nn', StartOfTheDay(date_1.Date));
        brw_JO.ParamByName('DATE2').Value := FormatDateTime('yyyy-mm-dd hh:nn', EndOfTheDay(date_2.Date));
      end;
    end;
    brw_JO.Open();
  end;
end;

procedure Tf_PMBoard.SetStatusExecute(Sender: TObject);
begin
  //
end;

procedure Tf_PMBoard.Timer1Timer(Sender: TObject);
var msg : string;
  count: Integer;
begin
  with dm_PM do
  begin
    brw_PMNotif.Close;
    if roleid < 6 then
    begin
      brw_PMNotif.SQL[4]  := 'WHERE EMP.EMPID = :EMPID AND HEADER.LAYOUT = FALSE AND HEADER.CANCELLED = FALSE';
      brw_PMNotif.ParamByName('EMPID').Value  := dm_PM.empid;
    end
    else
    begin
      brw_PMNotif.SQL[4]  := 'WHERE HEADER.LAYOUT = FALSE AND HEADER.CANCELLED = FALSE';
    end;
    brw_PMNotif.Open();

    msg   := '';
    count := 0;
    if brw_PMNotif.RecordCount > 0 then
    begin
      brw_PMNotif.First;
      while not brw_PMNotif.Eof do
      begin
        msg := brw_PMNotifEMPNAME.AsString + ' - ' +brw_PMNotifCLIENTNAME.AsString + ' - JO NO. '+brw_PMNotifJONO.AsString + ': ('+IntToStr(brw_PMNotifQTY.Value + brw_PMNotifFREE.Value)+') '+brw_PMNotifDESCRIPTION.AsString + #13#10 + msg;
        Inc(count);
        if count < 20 then
        brw_PMNotif.Next
        else
        Break
      end;

      Timer1.Enabled := False;
      MessageDlg('Please be advised with the following pending Job Order(s):' +#13#10 +#13#10+msg, mtWarning, [mbOK], 0);
      Timer1.Enabled  := True;
    end;
  end;
end;

end.
