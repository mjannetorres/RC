unit fMatRequestTemp;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls, Vcl.StdCtrls, cxGraphics,
  cxControls, cxLookAndFeels, cxLookAndFeelPainters, cxContainer, cxEdit,
  dxSkinsCore, dxSkinBlack, dxSkinBlue, dxSkinBlueprint, dxSkinCaramel,
  dxSkinCoffee, dxSkinDarkRoom, dxSkinDarkSide, dxSkinDevExpressDarkStyle,
  dxSkinDevExpressStyle, dxSkinFoggy, dxSkinGlassOceans, dxSkinHighContrast,
  dxSkiniMaginary, dxSkinLilian, dxSkinLiquidSky, dxSkinLondonLiquidSky,
  dxSkinMcSkin, dxSkinMetropolis, dxSkinMetropolisDark, dxSkinMoneyTwins,
  dxSkinOffice2007Black, dxSkinOffice2007Blue, dxSkinOffice2007Green,
  dxSkinOffice2007Pink, dxSkinOffice2007Silver, dxSkinOffice2010Black,
  dxSkinOffice2010Blue, dxSkinOffice2010Silver, dxSkinOffice2013DarkGray,
  dxSkinOffice2013LightGray, dxSkinOffice2013White, dxSkinOffice2016Colorful,
  dxSkinOffice2016Dark, dxSkinPumpkin, dxSkinSeven, dxSkinSevenClassic,
  dxSkinSharp, dxSkinSharpPlus, dxSkinSilver, dxSkinSpringTime, dxSkinStardust,
  dxSkinSummer2008, dxSkinTheAsphaltWorld, dxSkinsDefaultPainters,
  dxSkinValentine, dxSkinVisualStudio2013Blue, dxSkinVisualStudio2013Dark,
  dxSkinVisualStudio2013Light, dxSkinVS2010, dxSkinWhiteprint,
  dxSkinXmas2008Blue, cxStyles, dxSkinscxPCPainter, cxCustomData, cxFilter,
  cxData, cxDataStorage, cxNavigator, Data.DB, cxDBData, cxDBLookupComboBox,
  cxDropDownEdit, frxClass, cxClasses, System.Actions, Vcl.ActnList,
  cxGridLevel, cxGridCustomTableView, cxGridTableView, cxGridDBTableView,
  cxGridCustomView, cxGrid, cxCheckBox, cxDBEdit, cxLookupEdit, cxDBLookupEdit,
  cxMemo, scControls, scGPFontControls, cxMaskEdit, cxCalendar, cxTextEdit,
  cxLabel, cxDBLabel, cxGroupBox, cxRadioGroup, Vcl.Menus;

type
  Tf_MatReqTemp = class(TForm)
    Panel2: TPanel;
    btnSave: TButton;
    btnCancel: TButton;
    btnPrint: TButton;
    Panel3: TPanel;
    Label1: TLabel;
    Label4: TLabel;
    Label6: TLabel;
    date_date: TcxDBDateEdit;
    date_posted: TcxDBDateEdit;
    cxDBLabel1: TcxDBLabel;
    txt_notes: TcxDBMemo;
    chk_posted: TcxDBCheckBox;
    grid_jodetail: TcxGrid;
    cxGridDBTableView1: TcxGridDBTableView;
    cxGridLevel1: TcxGridLevel;
    ds_MR: TDataSource;
    ActionList1: TActionList;
    UI: TAction;
    Print: TAction;
    cxStyleRepository1: TcxStyleRepository;
    Header_style: TcxStyle;
    frxReport1: TfrxReport;
    rad_source: TcxDBRadioGroup;
    Label3: TLabel;
    Label5: TLabel;
    cmb_jo: TcxDBLookupComboBox;
    ds_details: TDataSource;
    cxGridDBTableView1ITEMID: TcxGridDBColumn;
    cxGridDBTableView1COST: TcxGridDBColumn;
    cxGridDBTableView1OLDQTY: TcxGridDBColumn;
    cxGridDBTableView1QTY: TcxGridDBColumn;
    cxGridDBTableView1TOTALCOST: TcxGridDBColumn;
    cxGridDBTableView1UNIT: TcxGridDBColumn;
    ds_items: TDataSource;
    ds_JO: TDataSource;
    PopupMenu1: TPopupMenu;
    Delete: TAction;
    Delete1: TMenuItem;
    procedure UIExecute(Sender: TObject);
    procedure rad_sourceExit(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure chk_postedClick(Sender: TObject);
    procedure cxGridDBTableView1ITEMIDPropertiesCloseUp(Sender: TObject);
    procedure PrintExecute(Sender: TObject);
    procedure cxGridDBTableView1QTYPropertiesValidate(Sender: TObject;
      var DisplayValue: Variant; var ErrorText: TCaption; var Error: Boolean);
    procedure DeleteExecute(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
  private
    { Private declarations }
    posted: Boolean;
    procedure refresh_items;
    procedure generate_jo;
    procedure readonly(flag: Boolean);
    function manageui: Boolean;
  public
    { Public declarations }
  end;

var
  f_MatReqTemp: Tf_MatReqTemp;

implementation

{$R *.dfm}

uses dmPM, fReports;


procedure Tf_MatReqTemp.chk_postedClick(Sender: TObject);
begin
  if chk_posted.Checked then
  begin
    if manageui then
    dm_PM.qry_MRPOSTEDDATETIME.Value  := Now
    else
    begin
      dm_PM.qry_MRPOSTEDDATETIME.Clear;
      dm_PM.qry_MRPOSTED.Value  := False;
      chk_posted.Checked        := False;
    end;

    if dm_PM.tb_MRDetails.RecordCount = 0 then
    MessageDlg('Details cannot be empty!', mtError, [mbOK], 0)
    else if dm_PM.qry_MRREQDATETIME.IsNull then
    MessageDlg('Date cannot be empty!', mtError, [mbOK], 0)
    else if dm_PM.qry_MRSOURCE.Value <> 'O' then
    begin
      if dm_PM.qry_MRJONO.IsNull then
      MessageDlg('JO No. cannot be empty!', mtError, [mbOK], 0);
    end;
  end
  else
    dm_PM.qry_MRPOSTEDDATETIME.Clear;
end;

procedure Tf_MatReqTemp.UIExecute(Sender: TObject);
begin
  readonly(dm_PM.qry_MRPOSTED.Value);
  if not dm_PM.qry_MRPOSTED.Value then
  manageui;
end;


procedure Tf_MatReqTemp.rad_sourceExit(Sender: TObject);
begin
  generate_jo;
  UIExecute(nil);
end;

procedure Tf_MatReqTemp.cxGridDBTableView1ITEMIDPropertiesCloseUp(
  Sender: TObject);
  var itemid: Integer;
begin
  with dm_PM do
  begin
    itemid  := tb_MRDetailsITEMID.Value;

    tb_MRDetails.DisableControls;
    tb_MRDetails.Filtered := False;
    tb_MRDetails.Filter   := 'ITEMID = '+IntToStr(itemid);
    tb_MRDetails.Filtered := True;

    if tb_MRDetails.RecordCount > 1 then
    begin
      tb_MRDetails.Last;
      tb_MRDetails.Delete;
      MessageDlg('Item already on the list!', mtInformation, [mbOK], 0);
      tb_MRDetails.Filtered := False;
      tb_MRDetails.EnableControls;
      Exit;
    end
    else
    begin
      tb_MRDetails.Filtered := False;
      tb_MRDetails.EnableControls;
    end;

    brw_items.DisableControls;
    if brw_items.Locate('ID', tb_MRDetailsITEMID.Value) then
    begin
      tb_MRDetails.Edit;
      tb_MRDetailsITEMDESC.Value  := brw_itemsDESCRIPTION.AsString;
      tb_MRDetailsUNIT.Value      := brw_itemsINVUNIT.Value;
      tb_MRDetailsCOST.Value      := brw_itemsCOST.Value;
      tb_MRDetailsOLDQTY.Value    := brw_itemsONHAND.Value;
      tb_MRDetails.Post;
    end;
    brw_items.EnableControls;
  end;
end;

procedure Tf_MatReqTemp.cxGridDBTableView1QTYPropertiesValidate(Sender: TObject;
  var DisplayValue: Variant; var ErrorText: TCaption; var Error: Boolean);
begin
  if DisplayValue < 0 then
  begin
    DisplayValue := 0;
    MessageDlg('Invalid qty!', mtError, [mbOK], 0);
  end;
end;

procedure Tf_MatReqTemp.DeleteExecute(Sender: TObject);
begin
  with dm_PM do
  begin
     if not tb_MRDetailsID.IsNull then
     begin
       qry_MRDetails.Close;
       qry_MRDetails.SQL[2]  := 'WHERE ID = :ID';
       qry_MRDetails.ParamByName('ID').Value := tb_MRDetailsID.Value;
       qry_MRDetails.Open();

       if qry_MRDetails.RecordCount > 0 then
       begin
         qry_MRDetails.Edit;
         qry_MRDetailsCANCELLED.Value        := True;
         qry_MRDetailsDELETEDBYID.Value      := userid;
         qry_MRDetailsDELETEDDATETIME.Value  := Now;
         qry_MRDetails.Post;
         qry_MRDetails.ApplyUpdates();
       end;
     end;
     tb_MRDetails.Delete;
     UIExecute(nil);
  end;
end;

procedure Tf_MatReqTemp.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  if (manageui) then
  Action  := caFree
  else
  begin
    if (dm_PM.qry_MR.State = dsEdit) then
    begin
      refresh_items;
      Action  := caNone;
    end
    else
      Action  := caFree;
  end;
end;

procedure Tf_MatReqTemp.FormShow(Sender: TObject);
begin
  with dm_PM do
  begin
    refresh_items;
    generate_jo;

    posted  := qry_MRPOSTED.Value;

    readonly(qry_MRPOSTED.Value);
    if not qry_MRPOSTED.Value then
    manageui;
  end;
end;

procedure Tf_MatReqTemp.generate_jo;
var roleid : Integer;
begin
  with dm_PM do
  begin
    if qry_MRSOURCE.Value <> 'O' then
    begin
      brw_PMHeader.Close;
      if qry_MRSOURCE.Value = 'D' then
      roleid  := 1
      else if qry_MRSOURCE.Value = 'P' then
      roleid  := 2
      else if (qry_MRSOURCE.Value = 'F') or (qry_MRSOURCE.Value = 'L') then
      roleid  := 3
      else if qry_MRSOURCE.Value = 'H' then
      roleid  := 4
      else if qry_MRSOURCE.Value = 'S' then
      roleid  := 5;
      brw_PMHeader.SQL[3] := 'WHERE PM.ROLEID = :ROLEID AND PM.EMPID = :ID AND PM.CANCELLED = FALSE AND JO.RELEASED = TRUE';
      brw_PMHeader.ParamByName('ID').Value      := userid;
      brw_PMHeader.ParamByName('ROLEID').Value  := roleid;
      brw_PMHeader.Open();
    end;
  end;
end;

function Tf_MatReqTemp.manageui: Boolean;
begin
  with dm_PM do
  begin
    cmb_jo.Style.BorderColor := $00121212;
    if qry_MRSOURCE.Value <> 'O' then
    begin
      if qry_MRJONO.IsNull then
      cmb_jo.Style.BorderColor := clRed;
    end;

    date_date.Style.BorderColor     := $00121212;
    if qry_MRREQDATETIME.IsNull then
    date_date.Style.BorderColor     := clRed;


    if qry_MRSOURCE.Value <> 'O' then
    begin
      if (qry_MRJONO.IsNull) or (qry_MRREQDATETIME.IsNull) or (tb_MRDetails.RecordCount = 0) then
      btnSave.Enabled := False
      else
      btnSave.Enabled := True;
    end
    else
    begin
      if (qry_MRREQDATETIME.IsNull) or (tb_MRDetails.RecordCount = 0) then
      btnSave.Enabled := False
      else
      btnSave.Enabled := True;
    end;

    Result  := btnSave.Enabled;
  end;
end;

procedure Tf_MatReqTemp.PrintExecute(Sender: TObject);
begin
  with dm_PM do
  begin
    qry_company.Close;
    qry_company.SQL[2]  := 'WHERE ID = 1';
    qry_company.Open();

    brw_Emp.Close;
    brw_Emp.SQL[2]   := 'WHERE ID = :ID';
    brw_Emp.ParamByName('ID').Value := qry_MRREQBY.Value;
    brw_Emp.Open();

    f_Reports := Tf_Reports.Create(Self);
    f_Reports.rep_MR.ShowReport();
  end;
end;

procedure Tf_MatReqTemp.readonly(flag: Boolean);
begin
  cxGridDBTableView1ITEMID.Options.Editing  := not flag;
  cxGridDBTableView1QTY.Options.Editing     := not flag;
  rad_source.Properties.ReadOnly            := flag;
  txt_notes.Properties.ReadOnly             := flag;
  cmb_jo.Properties.ReadOnly                := flag;
  date_date.Properties.ReadOnly             := flag;
  date_posted.Properties.ReadOnly           := flag;
  Delete1.Visible                           := not flag;

  if posted then
  btnSave.Enabled       := not flag
  else
  btnSave.Enabled       := True;

  if dm_PM.qry_MR.State = dsInsert then
  begin
    chk_posted.Properties.ReadOnly  := False;
    btnPrint.Visible                := False;
  end
  else
  begin
    chk_posted.Properties.ReadOnly  := posted;
    btnPrint.Visible                := posted;
  end;

end;

procedure Tf_MatReqTemp.refresh_items;
begin
  with dm_PM do
  begin
    brw_items.Close;
    brw_items.SQL[2]  := 'WHERE CANCELLED = FALSE';
    brw_items.Open();
  end;
end;

end.
