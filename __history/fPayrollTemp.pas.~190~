unit fPayrollTemp;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, cxGraphics, cxControls, cxLookAndFeels,
  cxLookAndFeelPainters, cxStyles, dxSkinsCore, dxSkinBlack, dxSkinBlue,
  dxSkinBlueprint, dxSkinCaramel, dxSkinCoffee, dxSkinDarkRoom, dxSkinDarkSide,
  dxSkinDevExpressDarkStyle, dxSkinDevExpressStyle, dxSkinFoggy,
  dxSkinGlassOceans, dxSkinHighContrast, dxSkiniMaginary, dxSkinLilian,
  dxSkinLiquidSky, dxSkinLondonLiquidSky, dxSkinMcSkin, dxSkinMetropolis,
  dxSkinMetropolisDark, dxSkinMoneyTwins, dxSkinOffice2007Black,
  dxSkinOffice2007Blue, dxSkinOffice2007Green, dxSkinOffice2007Pink,
  dxSkinOffice2007Silver, dxSkinOffice2010Black, dxSkinOffice2010Blue,
  dxSkinOffice2010Silver, dxSkinOffice2013DarkGray, dxSkinOffice2013LightGray,
  dxSkinOffice2013White, dxSkinOffice2016Colorful, dxSkinOffice2016Dark,
  dxSkinPumpkin, dxSkinSeven, dxSkinSevenClassic, dxSkinSharp, dxSkinSharpPlus,
  dxSkinSilver, dxSkinSpringTime, dxSkinStardust, dxSkinSummer2008,
  dxSkinTheAsphaltWorld, dxSkinsDefaultPainters, dxSkinValentine,
  dxSkinVisualStudio2013Blue, dxSkinVisualStudio2013Dark,
  dxSkinVisualStudio2013Light, dxSkinVS2010, dxSkinWhiteprint,
  dxSkinXmas2008Blue, dxSkinscxPCPainter, cxCustomData, cxFilter, cxData,
  cxDataStorage, cxEdit, cxNavigator, Data.DB, cxDBData, cxTextEdit,
  Vcl.ComCtrls, Vcl.ToolWin, scControls, Vcl.Menus, frxClass, cxClasses,
  System.Actions, Vcl.ActnList, cxGridLevel, cxGridCustomTableView,
  cxGridTableView, cxGridDBTableView, cxGridCustomView, cxGrid, Vcl.StdCtrls,
  Vcl.ExtCtrls, System.ImageList, Vcl.ImgList, acAlphaImageList,
  cxGridBandedTableView, cxGridDBBandedTableView, cxContainer, cxMaskEdit,
  cxDropDownEdit, cxCalendar, cxDBEdit, cxLabel, cxDBLabel, cxDBLookupComboBox,
  cxImageComboBox;

type
  Tf_PayrollTemp = class(TForm)
    Panel3: TPanel;
    grid_jodetail: TcxGrid;
    cxGridDBTableView1: TcxGridDBTableView;
    cxGridLevel1: TcxGridLevel;
    ActionList1: TActionList;
    cxStyleRepository1: TcxStyleRepository;
    Header_style: TcxStyle;
    frxReport1: TfrxReport;
    PopupMenu1: TPopupMenu;
    Delete1: TMenuItem;
    ds_PayrollDetail: TDataSource;
    AddEmployee: TAction;
    Compute: TAction;
    Post: TAction;
    sCharImageList1: TsCharImageList;
    scToolBar2: TscToolBar;
    btnEmp: TToolButton;
    btnComp: TToolButton;
    btnPost: TToolButton;
    btnPrint: TToolButton;
    Print: TAction;
    Save: TAction;
    Cancel: TAction;
    grid_jodetailDBBandedTableView1: TcxGridDBBandedTableView;
    grid_jodetailDBBandedTableView1EMPID: TcxGridDBBandedColumn;
    grid_jodetailDBBandedTableView1ROLE: TcxGridDBBandedColumn;
    grid_jodetailDBBandedTableView1FREQ: TcxGridDBBandedColumn;
    grid_jodetailDBBandedTableView1RATE: TcxGridDBBandedColumn;
    grid_jodetailDBBandedTableView1BASICPAY: TcxGridDBBandedColumn;
    grid_jodetailDBBandedTableView1ALLOWANCES: TcxGridDBBandedColumn;
    grid_jodetailDBBandedTableView1BACKWAGE: TcxGridDBBandedColumn;
    grid_jodetailDBBandedTableView1LATE: TcxGridDBBandedColumn;
    grid_jodetailDBBandedTableView1OTHERS: TcxGridDBBandedColumn;
    grid_jodetailDBBandedTableView1SSS: TcxGridDBBandedColumn;
    grid_jodetailDBBandedTableView1PAGIBIG: TcxGridDBBandedColumn;
    grid_jodetailDBBandedTableView1PHILHEALTH: TcxGridDBBandedColumn;
    grid_jodetailDBBandedTableView1NETPAY: TcxGridDBBandedColumn;
    band_style: TcxStyle;
    Label1: TLabel;
    cxDBLabel1: TcxDBLabel;
    ds_payreg: TDataSource;
    grid_jodetailDBBandedTableView1ABSENCES: TcxGridDBBandedColumn;
    ds_emp: TDataSource;
    grid_jodetailDBBandedTableView1IDNO: TcxGridDBBandedColumn;
    PopupMenu2: TPopupMenu;
    P1: TMenuItem;
    P2: TMenuItem;
    Payslip: TAction;
    PayrollSum: TAction;
    ToolButton8: TToolButton;
    ToolButton9: TToolButton;
    ToolButton10: TToolButton;
    ToolButton11: TToolButton;
    grid_jodetailDBBandedTableView1SCHED: TcxGridDBBandedColumn;
    btnSave: TButton;
    Button2: TButton;
    Panel1: TPanel;
    grid_jodetailDBBandedTableView1NODAYS: TcxGridDBBandedColumn;
    grid_jodetailDBBandedTableView1NOPIECES: TcxGridDBBandedColumn;
    Label2: TLabel;
    date_end: TcxDBDateEdit;
    grid_jodetailDBBandedTableView1DAYSABSENT: TcxGridDBBandedColumn;
    grid_jodetailDBBandedTableView1HRSLATE: TcxGridDBBandedColumn;
    ViewParticular: TAction;
    ViewParticular1: TMenuItem;
    Delete: TAction;
    lblPosted: TLabel;
    grid_jodetailDBBandedTableView1CA: TcxGridDBBandedColumn;
    ViewCA: TAction;
    ViewCA1: TMenuItem;
    grid_jodetailDBBandedTableView1PAIDAMNT: TcxGridDBBandedColumn;
    grid_jodetailDBBandedTableView1BALAMNT: TcxGridDBBandedColumn;
    procedure PostExecute(Sender: TObject);
    procedure ComputeExecute(Sender: TObject);
    procedure AddEmployeeExecute(Sender: TObject);
    procedure CancelExecute(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormShow(Sender: TObject);
    procedure PayslipExecute(Sender: TObject);
    procedure PayrollSumExecute(Sender: TObject);
    procedure ViewParticularExecute(Sender: TObject);
    procedure DeleteExecute(Sender: TObject);
    procedure PrintExecute(Sender: TObject);
    procedure grid_jodetailExit(Sender: TObject);
    procedure ViewCAExecute(Sender: TObject);
  private
    { Private declarations }
    posted: Boolean;
    procedure readonly(flag: Boolean);
  public
    { Public declarations }
  end;

var
  f_PayrollTemp: Tf_PayrollTemp;

implementation

{$R *.dfm}

uses dmPM, fAddEmp, DateUtils, fPayrollDetail, fPayrollComp, fReports, fViewCA;

procedure Tf_PayrollTemp.AddEmployeeExecute(Sender: TObject);
var price: Real;
begin
  with dm_PM do
  begin
    f_AddEmp  := Tf_AddEmp.Create(Self);
    if f_AddEmp.ShowModal = mrOk then
    begin
      tb_Emp.Filtered := False;
      tb_Emp.Filter   := 'SELECT = TRUE';
      tb_Emp.Filtered := True;

      if tb_Emp.RecordCount > 0 then
      begin
        tb_Emp.First;
        while not tb_Emp.Eof do
        begin
          if not tb_PayDetail.Locate('EMPID', tb_EmpID.Value, []) then
          begin
            tb_PayDetail.Append;
            tb_PayDetailEMPID.Value       := tb_EmpID.Value;
            tb_PayDetailROLE.Value        := tb_EmpROLE.Value;
            tb_PayDetailROLEID.Value      := tb_EmpROLEID.Value;
            tb_PayDetailSCHED.Value       := tb_EmpFREQUENCY.Value;
            tb_PayDetailMODE.Value        := tb_EmpMODEOFCOMP.Value;
            if tb_PayDetailSCHED.Value = 'WEEKLY' then
            tb_PayDetailNODAYS.Value      := 6
            else if tb_PayDetailSCHED.Value = 'TWICE A MONTH' then
            tb_PayDetailNODAYS.Value      := 13
            else if tb_PayDetailSCHED.Value = 'MONTHLY' then
            tb_PayDetailNODAYS.Value      := 26;
            tb_PayDetailRATE.Value        := tb_EmpRATE.Value;
            tb_PayDetailIDNO.Value        := tb_EmpIDNO.Value;
            tb_PayDetailSSS.Value         := tb_EmpSSS.Value;
            tb_PayDetailPAGIBIG.Value     := tb_EmpPAGIBIG.Value;
            tb_PayDetailPHIC.Value        := tb_EmpPHILHEALTH.Value;
            tb_PayDetailEMPNAME.Value     := tb_EmpEMPNAME.Value;

            if tb_PayDetailMODE.Value = 'P' then
            begin
              brw_Logs.Close;
              brw_Logs.SQL[4] := 'WHERE PM_LOGS.EMPID = :EMPID AND PM_LOGS.CANCELLED = FALSE AND PM_BOARD.CANCELLED = FALSE';
              brw_Logs.ParamByName('EMPID').Value :=  tb_PayDetailEMPID.Value;
              brw_Logs.Open();

              if brw_Logs.RecordCount > 0 then
              begin
                brw_Logs.First;
                price  := 0;
                while not brw_Logs.Eof do
                begin
                  tb_PayDetailPARTICULAR.Value    := tb_PayDetailPARTICULAR.Value +'Date : '+ FormatDateTime('mm/dd/yyyy', brw_LogsLOGDATE.Value) +#13#10;
                  tb_PayDetailPARTICULAR.Value    := tb_PayDetailPARTICULAR.Value +'JO No : '+ brw_LogsJONO.AsString +'; ';

                  brw_GarmentDesc.Close;
                  brw_GarmentDesc.SQL[3]  := 'WHERE GAR.ID = :ID';
                  brw_GarmentDesc.ParamByName('ID').Value := brw_LogsSHIRTID.Value;
                  brw_GarmentDesc.Open();

                  tb_PayDetailPARTICULAR.Value    := tb_PayDetailPARTICULAR.Value +'Item : '+ brw_GarmentDescDESCRIPTION.AsString + '; ';
                  tb_PayDetailPARTICULAR.Value    := tb_PayDetailPARTICULAR.Value +'Qty : '+ brw_LogsQTY.AsString + '; ';

                  if brw_LogsROLEID.Value = 1 then
                  price := price + (brw_LogsQTY.AsFloat * brw_GarmentDescARTISTSHARE.Value)
                  else if brw_LogsROLEID.Value = 2 then
                  price := price + (brw_LogsQTY.AsFloat * brw_GarmentDescPRINTOPSHARE.Value)
                  else if brw_LogsROLEID.Value = 3 then
                  price := price + (brw_LogsQTY.AsFloat * brw_GarmentDescCUTTERSHARE.Value)
                  else if brw_LogsROLEID.Value = 4 then
                  price := price + (brw_LogsQTY.AsFloat * brw_GarmentDescHEATPRESSSHARE.Value)
                  else if brw_LogsROLEID.Value = 5 then
                  price := price + (brw_LogsQTY.AsFloat * brw_GarmentDescTAILORSHARE.Value);

                  tb_PayDetailPARTICULAR.Value    := tb_PayDetailPARTICULAR.Value +'Price : '+ VarToStr(price) +#13#10;

                  brw_Logs.Next;
                end;
              end;
            end;

            tb_PayDetail.Post;
          end;
          tb_Emp.Next;
        end;
        tb_PayDetail.First;
      end;
    end;
  end;
end;

procedure Tf_PayrollTemp.CancelExecute(Sender: TObject);
begin
  Close;
end;

procedure Tf_PayrollTemp.ComputeExecute(Sender: TObject);
var date1, date2, date3, date4: TDateTime;
begin
  with dm_PM do
  begin
    if MessageDlg('Continue to compute emp. rate?', mtConfirmation, [mbYes, mbNo], 0) = mrYes then
    begin

      f_PayrollComp := Tf_PayrollComp.Create(Self);
      f_PayrollComp.cxDateEdit1.Date  := IncDay(StartOfTheWeek(date_end.Date), -2);
      f_PayrollComp.cxDateEdit2.Date  := IncDay(EndOfTheWeek(date_end.Date), -2);

      f_PayrollComp.Caption := 'Cash Advance Period Coverage';
      if f_PayrollComp.ShowModal = mrOk then
      begin
        date1 := f_PayrollComp.cxDateEdit1.Date;
        date2 := f_PayrollComp.cxDateEdit2.Date;
      end;

      f_PayrollComp.Caption := 'Work Log Period Coverage';
      if f_PayrollComp.ShowModal = mrOk then
      begin
        date3 := f_PayrollComp.cxDateEdit1.Date;
        date4 := f_PayrollComp.cxDateEdit2.Date;
      end;


      tb_PayDetail.First;
      while not tb_PayDetail.Eof do
      begin

        brw_CompExpense.Close;           //
        brw_CompExpense.SQL[4]  := 'WHERE (HEADER.SALESDATE BETWEEN :date1 and :date2) AND DETAIL.EMPID = :EMPID AND EXP.CATEGORY = 2 AND HEADER.CANCELLED = FALSE AND DETAIL.CANCELLED = FALSE';
        brw_CompExpense.ParamByName('EMPID').Value   := tb_PayDetailEMPID.Value;
        brw_CompExpense.ParamByName('date1').Value   := date1;
        brw_CompExpense.ParamByName('date2').Value   := date2;
        brw_CompExpense.Open();

        tb_PayDetail.Edit;
        tb_PayDetailCA.Value        := brw_CompExpenseAMOUNT.Value;

        tb_PayDetailNOPIECES.Value  := 0;
        tb_PayDetailRATE.Value      := 0;


        if tb_PayDetailMODE.Value = 'P' then
        begin
          brw_DoneOrder.Close;
          brw_DoneOrder.SQL[3]  := 'WHERE (PM_LOGS.LOGDATE BETWEEN :date1 and :date2) AND PM_LOGS.EMPID = :EMPID AND PM_LOGS.CANCELLED = FALSE AND PM_BOARD.CANCELLED = FALSE';
          brw_DoneOrder.ParamByName('EMPID').Value   := tb_PayDetailEMPID.Value;
          brw_DoneOrder.ParamByName('date1').Value   := date3;
          brw_DoneOrder.ParamByName('date2').Value    := date4;
          brw_DoneOrder.Open();

          if brw_DoneOrder.RecordCount > 0 then
          begin
            brw_DoneOrder.First;
            while not brw_DoneOrder.Eof do
            begin
              brw_GarmentDesc.Close;
              brw_GarmentDesc.SQL[3]  := 'WHERE GAR.ID = :ID';
              brw_GarmentDesc.ParamByName('ID').Value := brw_DoneOrderSHIRTID.Value;
              brw_GarmentDesc.Open();

              tb_PayDetailNOPIECES.Value  := tb_PayDetailNOPIECES.Value + brw_DoneOrderQTY.AsFloat;

              if brw_DoneOrderROLEID.Value = 1 then
              tb_PayDetailRATE.Value := tb_PayDetailRATE.Value + (brw_DoneOrderQTY.AsFloat * brw_GarmentDescARTISTSHARE.Value)
              else if brw_DoneOrderROLEID.Value = 2 then
              tb_PayDetailRATE.Value := tb_PayDetailRATE.Value + (brw_DoneOrderQTY.AsFloat * brw_GarmentDescPRINTOPSHARE.Value)
              else if brw_DoneOrderROLEID.Value = 3 then
              tb_PayDetailRATE.Value := tb_PayDetailRATE.Value + (brw_DoneOrderQTY.AsFloat * brw_GarmentDescCUTTERSHARE.Value)
              else if brw_DoneOrderROLEID.Value = 4 then
              tb_PayDetailRATE.Value := tb_PayDetailRATE.Value + (brw_DoneOrderQTY.AsFloat * brw_GarmentDescHEATPRESSSHARE.Value)
              else if brw_DoneOrderROLEID.Value = 5 then
              tb_PayDetailRATE.Value := tb_PayDetailRATE.Value + (brw_DoneOrderQTY.AsFloat * brw_GarmentDescTAILORSHARE.Value);

              brw_DoneOrder.Next;
            end;
          end;
        end
        else if (tb_PayDetailMODE.Value = 'D') or (tb_PayDetailMODE.Value = 'F') then
        begin
          if tb_PayDetailMODE.Value = 'D' then
          begin
            brw_NoDays.Close;
            brw_NoDays.SQL[2] := 'WHERE (LOGDATE BETWEEN :date1 and :date2) AND EMPID = :EMPID AND CANCELLED = FALSE';
            brw_NoDays.ParamByName('EMPID').Value   := tb_PayDetailEMPID.Value;
            brw_NoDays.ParamByName('date1').Value   := date3;
            brw_NoDays.ParamByName('date2').Value   := date4;
            brw_NoDays.Open();

            tb_PayDetailNODAYS.Value    := brw_NoDays.RecordCount;
          end;

          brw_EmpReg.Close;
          brw_EmpReg.SQL[3] := 'WHERE EMP_REG.ID = :ID';
          brw_EmpReg.ParamByName('ID').Value  := tb_PayDetailEMPID.Value;
          brw_EmpReg.Open();

          tb_PayDetailRATE.Value  :=  brw_EmpRegRATE.Value;
        end;

        tb_PayDetail.Post;
        tb_PayDetail.Next;
      end;
      tb_PayDetail.First;
    end;
  end;
end;

procedure Tf_PayrollTemp.DeleteExecute(Sender: TObject);
begin
  with dm_PM do
  begin
    if MessageDlg('Continue to delete this record from the list?', mtConfirmation, [mbYes,mbNo], 0) = mrYes then
    begin
      if not tb_PayDetailID.IsNull then
      begin
        qry_PayDetail.Close;
        qry_PayDetail.SQL[2]  := 'WHERE ID = :ID';
        qry_PayDetail.ParamByName('ID').Value := tb_PayDetailID.Value;
        qry_PayDetail.Open();

        if qry_PayDetail.RecordCount > 0 then
        begin
          qry_PayDetail.Edit;
          qry_PayDetailCANCELLED.Value          := True;
          qry_PayDetailCANCELLEDBYID.Value      := userid;
          qry_PayDetailCANCELLEDDATETIME.Value  := Now;

          qry_PayDetail.Post;
          qry_PayDetail.ApplyUpdates();
        end;
      end;
      tb_PayDetail.Delete;
    end;
  end;
end;

procedure Tf_PayrollTemp.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  Action  := caFree;
end;

procedure Tf_PayrollTemp.FormShow(Sender: TObject);
begin
  with dm_PM do
  begin
    posted  := qry_PayrollPOSTED.Value;
    readonly(qry_PayrollPOSTED.Value);
  end;
end;

procedure Tf_PayrollTemp.grid_jodetailExit(Sender: TObject);
begin
  dm_PM.tb_PayDetail.Edit;
  dm_PM.tb_PayDetail.Post;
end;

procedure Tf_PayrollTemp.PayrollSumExecute(Sender: TObject);
begin
 with dm_PM do
  begin
    qry_company.Close;
    qry_company.SQL[2]  := 'WHERE ID = 1';
    qry_company.Open();

    brw_Emp.Close;
    brw_Emp.SQL[2]   := 'WHERE USERID = :ID';
    brw_Emp.ParamByName('ID').Value := qry_PayrollCREATEDBYID.Value;
    brw_Emp.Open();

    f_reports := Tf_Reports.Create(Self);
    f_Reports.rep_PaySummary.ShowReport(True);
  end;
end;

procedure Tf_PayrollTemp.PayslipExecute(Sender: TObject);
begin
  with dm_PM do
  begin
    qry_company.Close;
    qry_company.SQL[2]  := 'WHERE ID = 1';
    qry_company.Open();

    f_reports := Tf_Reports.Create(Self);
    f_Reports.rep_PaySlip.ShowReport(True);
  end;
end;

procedure Tf_PayrollTemp.PostExecute(Sender: TObject);
begin
  with dm_PM do
  begin
    if MessageDlg('Continue to post payroll?', mtConfirmation, [mbYes, mbNo], 0) = mrYes then
    begin
      qry_PayrollPOSTED.Value         := True;
      qry_PayrollPOSTEDDATETIME.Value := Now;

      MessageDlg('Payroll has been posted!', mtInformation, [mbOK], 0);
      readonly(qry_PayrollPOSTED.Value);
    end;
  end;
end;

procedure Tf_PayrollTemp.PrintExecute(Sender: TObject);
begin
  //
end;

procedure Tf_PayrollTemp.readonly(flag: Boolean);
begin
  with dm_PM do
  begin
    with dm_PM do
    begin
      grid_jodetailDBBandedTableView1NODAYS.Options.Editing     := not flag;
      grid_jodetailDBBandedTableView1NOPIECES.Options.Editing   := not flag;
      grid_jodetailDBBandedTableView1ALLOWANCES.Options.Editing := not flag;
      grid_jodetailDBBandedTableView1BACKWAGE.Options.Editing   := not flag;
      grid_jodetailDBBandedTableView1HRSLATE.Options.Editing    := not flag;
      grid_jodetailDBBandedTableView1DAYSABSENT.Options.Editing := not flag;
      grid_jodetailDBBandedTableView1OTHERS.Options.Editing     := not flag;

      date_end.Properties.ReadOnly   := flag;

      lblPosted.Visible := flag;

      if posted then
      btnSave.Enabled       := not flag
      else
      btnSave.Enabled       := True;

      AddEmployee.Enabled :=  not flag;
      Compute.Enabled     :=  not flag;
      Post.Enabled        :=  not flag;
      Delete.Enabled      :=  not flag;

      AddEmployee.ImageIndex  := 0;
      if not AddEmployee.Enabled then
      AddEmployee.ImageIndex := 4;
      Compute.ImageIndex  := 1;
      if not Compute.Enabled then
      Compute.ImageIndex := 5;
      Post.ImageIndex  := 2;
      if not Post.Enabled then
      Post.ImageIndex := 6;
    end;
  end;
end;

procedure Tf_PayrollTemp.ViewCAExecute(Sender: TObject);
var date1, date2 : TDateTime;
  AValue: Variant;
  AColumn: TcxGridDBBandedColumn;
begin
  with dm_PM do
  begin
    if tb_PayDetail.RecordCount > 0 then
    begin
      f_PayrollComp := Tf_PayrollComp.Create(Self);
      f_PayrollComp.cxDateEdit1.Date  := IncDay(StartOfTheWeek(date_end.Date), -2);
      f_PayrollComp.cxDateEdit2.Date  := IncDay(EndOfTheWeek(date_end.Date), -2);


      if f_PayrollComp.ShowModal = mrOk then
      begin
        date1 := f_PayrollComp.cxDateEdit1.Date;
        date2 := f_PayrollComp.cxDateEdit2.Date;
      end;

      brw_ViewCA.Close;
      brw_ViewCA.SQL[4]  := 'WHERE (HEADER.SALESDATE BETWEEN :date1 and :date2) AND DETAIL.EMPID = :EMPID AND EXP.CATEGORY = 2 AND HEADER.CANCELLED = FALSE AND DETAIL.CANCELLED = FALSE';
      brw_ViewCA.ParamByName('EMPID').Value   := tb_PayDetailEMPID.Value;
      brw_ViewCA.ParamByName('date1').Value   := date1;
      brw_ViewCA.ParamByName('date2').Value   := date2;
      brw_ViewCA.Open();

      brw_ViewCA.First;

      AColumn := grid_jodetailDBBandedTableView1.GetColumnByFieldName('EMPID');
      AValue := grid_jodetailDBBandedTableView1.Controller.FocusedRecord.DisplayTexts[AColumn.Index]; //FocusedRecord.Values[AColumn.Index];

      f_ViewCA   := Tf_ViewCA.Create(Self);
      f_ViewCA.cxLabel1.Caption  := AValue;
      f_ViewCA.ShowModal;
    end;
  end;
end;

procedure Tf_PayrollTemp.ViewParticularExecute(Sender: TObject);
var empname : string;
  date1, date2: TDateTime;
begin
  with dm_PM do
  begin
    tb_PayParticular.Close;
    tb_PayParticular.Open;

    if tb_PayDetail.RecordCount > 0 then
    begin

      f_PayrollComp := Tf_PayrollComp.Create(Self);
      f_PayrollComp.cxDateEdit1.Date  := IncDay(StartOfTheWeek(date_end.Date), -2);
      f_PayrollComp.cxDateEdit2.Date  := IncDay(EndOfTheWeek(date_end.Date), -2);


      if f_PayrollComp.ShowModal = mrOk then
      begin
        date1 := f_PayrollComp.cxDateEdit1.Date;
        date2 := f_PayrollComp.cxDateEdit2.Date;
      end;

      brw_Logs.Close;
      brw_Logs.SQL[4] := 'WHERE (PM_LOGS.LOGDATE BETWEEN :date1 and :date2) AND PM_LOGS.EMPID = :EMPID AND PM_LOGS.CANCELLED = FALSE AND PM_BOARD.CANCELLED = FALSE';
      brw_Logs.ParamByName('EMPID').Value  :=  tb_PayDetailEMPID.Value;
      brw_Logs.ParamByName('date1').Value  := date1;
      brw_Logs.ParamByName('date2').Value  := date2;
      brw_Logs.Open();

      empname := brw_LogsEMPNAME.AsString;

      if brw_Logs.RecordCount > 0 then
      begin
        brw_Logs.First;
        while not brw_Logs.Eof do
        begin
          tb_PayParticular.Append;
          tb_PayParticularQTY.Value       := brw_LogsQTY.Value;
          tb_PayParticularLOGDATE.Value   := brw_LogsLOGDATE.Value;
          tb_PayParticularJONO.Value      := brw_LogsJONO.Value;
          tb_PayParticularWORK.Value      := brw_LogsSPRINT.AsString;

          brw_GarmentDesc.Close;
          brw_GarmentDesc.SQL[3]  := 'WHERE GAR.ID = :ID';
          brw_GarmentDesc.ParamByName('ID').Value := brw_LogsSHIRTID.Value;
          brw_GarmentDesc.Open();

          if brw_LogsROLEID.Value = 1 then
          tb_PayParticularPRICE.Value :=  brw_GarmentDescARTISTSHARE.Value
          else if brw_LogsROLEID.Value = 2 then
          tb_PayParticularPRICE.Value := brw_GarmentDescPRINTOPSHARE.Value
          else if brw_LogsROLEID.Value = 3 then
          tb_PayParticularPRICE.Value := brw_GarmentDescCUTTERSHARE.Value
          else if brw_LogsROLEID.Value = 4 then
          tb_PayParticularPRICE.Value := brw_GarmentDescHEATPRESSSHARE.Value
          else if brw_LogsROLEID.Value = 5 then
          tb_PayParticularPRICE.Value := brw_GarmentDescTAILORSHARE.Value;

          tb_PayParticularGARMENT.Value   := brw_GarmentDescDESCRIPTION.AsString + ' ('+brw_LogsSIZE.AsString + ', '+brw_LogsFIT.AsString+')';
          tb_PayParticular.Post;

          brw_Logs.Next;
        end;
        tb_PayParticular.First;

        if tb_PayParticular.RecordCount > 0 then
        begin
          f_PayrollDetail := tf_payrollDetail.Create(Self);
          f_PayrollDetail.cxLabel1.Caption  := empname;
          f_PayrollDetail.ShowModal;
        end;
      end;
    end;
  end;
end;

end.
